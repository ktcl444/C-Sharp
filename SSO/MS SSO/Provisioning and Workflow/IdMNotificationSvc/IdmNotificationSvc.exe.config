<?xml version="1.0" encoding="utf-8" ?>
<configuration>
	<appSettings>
	
		<!-- General begin -->
		
			<!--
			From address for all the mail messages
			-->
			<add key="fromAddress" value="administrator@contoso.com"/>
			
			<!--
			Email body format: parameter {0} referes action performed 'added' or "removed'
			and {1}	refers to the group name			
			-->			
			<add key="groupChangeEmailBody" value="You have been {0} the following group: {1}"/>
			
			<!--
			Notifications are relayed to Contoso Exchange server that in turn sends the actual SMTP
			notifications.
			-->
			<add key="smtpServer" value="ffl-na-msg-01.na.corp.contoso.com"/>
			
			<!--
			Email Subject: For account creation notification
			-->
			<add key="accountProvisioningMailSub" value="Account created for direct report"/>
			
			<!--
			Email body format: position '({0})' to refer the account name created.
			-->
			<add key="accountProvisioningMailBody" value="A new account has been created for one of your direct reports {0} ({1})."/>
			<!--
			Email body format: position '({0})' to refer the initial password of the account created.
			-->
			<add key="accountPasswordMailBody" value="The initial password of the user is: ({0})."/>
											
			<!--
			Email body format of the account expiry notification: ({0}) refers to expiry date
			-->
			<add key="bodyAccountExpiry" value="Your account expires at {0} unless you ..."/>
			
			<!--
			Email subject format of the account expiry notification
			-->
			<add key="subAccountExpiry" value="Account expiry notification"/>
			
		<!-- General ends -->

		<!-- Account provisioning begin -->
		
			<!--
			Process account creation messages with a delay of X hours allowing mailboxes to
			be created and replicated
			-->
			<add key="accountCreationTime" value="0"/>
			
			<!--
			Subject of the mail to be sent on the occasion of the approved contractor
			-->
			<add key="subContractorApproved" value="Contractor Account Request Approved"/>
			
			<!--
			Email body format: Message for contractor approval. Parameters {0} {1} refers first name 
			and last name respectively
			-->
			<add key="msgContractorApproved" value="A new accout has been created for the contractor {0} {1}."/>
			<add key="pwdContractorApproved" value="The contractor's initial password is: ({0})."/>
			
			<!--
			Email message format:Subject of the mail sent for contractor denial
			-->
			<add key="subContractorDenied" value="Contractor Account Request Denied"/>
			
			<!--
			Email body format:Message body of the mail sent for denied contractor.
			Parameters {0} and {1} refers to first and last name of the contractor respectively
			-->
			<add key="bodyContractorDenied" value="The request for a new contractor account of {0} {1} has been denied."/>
																		
			<!--
			Subject of the mail to be sent on the occasion of the contractor request
			-->
			<add key="subContractorRequest" value="Contractor Account Request Approval"/>			
				
			<!--
			Email body format: Sent on the occasion of a contractor request
			-->
			<add key="bodyContractorRequest" value="A contractor account request is waiting for your approval."/>
			<add key="lnkContractorRequest" value="Please go to http://FFL-NA-MIIS/SSProv/SSProvApproval.aspx"/>
																																
			<!--
			MIIS MV Extension writes XML messages to this queue when accounts are provisioned and
			the notification service reads from this queue. The queue MUST be transactional
			-->
			<add key="accountQueueName" value=".\private$\AccountProvisioning"/>
			<add key="contractorQueueName" value=".\private$\SelfServiceProvisioning"/>

		<!-- Account provisioning end -->

		<!-- Group membership begin -->

			<!--
			Process account creation messages with a delay of X hours allowing mailboxes to
			be created and replicated
			-->
			<add key="accountCreationTime" value="0"/>

			<!--
			MIIS MV Extension writes XML messages to this queue when accounts are provisioned and
			the notification service reads from this queue. The queue MUST be transactional
			-->
			<add key="groupAccountQueueName" value=".\private$\miisGroupManagement"/>

		<!-- Group membership end -->

		<!-- Account expiry begin -->

			<!--
			Account expiry notifications run every X hours. A value of 24 searches AD every 24 hours and
			sends notifications to users that will expire within accountExpiryNotificationTime
			-->
			<add key="hoursBetweenAccountExpiryNotifications" value="24"/>
			
			<!--
			Number of days before account expires that a notification will be sent out
			-->
			<add key="accountExpiryNotificationTime" value="7"/>

			<!--
			Number of days before account expires that a notification will be sent out
			-->
			<add key="accountLDAPBindingString" value="LDAP://OU=ContosoCorp,DC=na,DC=corp,DC=contoso,DC=com"/>
					
		<!-- Account expiry end -->
		
		<!-- Password expiry begin -->

			<!--
			Password expiry notifications run every X hours. A value of 24 searches AD every 24 hours and
			sends notifications to users that have a password that will expire within passwordExpiryNotificationTime
			-->
			<add key="hoursBetweenPasswordExpiryNotifications" value="24"/>
			
			<!--
			Number of days before account expires that a notification will be sent out
			-->
			<add key="passwordExpiryNotificationTime" value="15"/>

			<!--
			LDAP binding string to the container that stores the users that will be checked for 
			password expiry
			-->
			<add key="passwordLDAPBindingString" value="LDAP://OU=Employees,OU=Accounts,DC=perimeter,DC=contoso,DC=com"/>
		
			<!--
			LDAP binding string to the domain that keeps the maximum password age policy
			-->
			<add key="passwordPolicyDomainLDAPBindingString" value="LDAP://PERIMETER"/>
			
			<!--
			Email body format: email body for password expiry notification
			Parameter {0} refers to number of days for password expiry
			-->
			<add key="pwdExpiryNotification" value="Your password expires in {0} days unless you go to https://www.contoso.com/ExtranetPwdChange/PwdChange.aspx and change it in "/>
			
			<!--
			String format for the account expiration mail subject
			-->
			<add key="pwdExpirySubject" value="Password expiry notification"/>
			
			<!--
			Remote LDAP account. If the two binding strings point to a domain where explicit credentials
			need to be used (such as when checking an extranet AD from the intranet without a trust 
			releation between the intranet and extranet) the credentials from this setting will be used
			Leave this setting blank to use the credentials of the service process
			TODO: This needs to be stored encrypted in an ACLed registry key
			-->
			<add key="remoteLDAPCredentials" value="Administrator;(15msa2O"/>

		<!-- Password expiry end -->
	</appSettings>
</configuration>
