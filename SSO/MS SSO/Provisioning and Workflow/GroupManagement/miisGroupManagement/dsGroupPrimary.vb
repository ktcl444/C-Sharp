'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsGroupDefinitions
    Inherits DataSet
    
    Private tablegroupDefinitions As groupDefinitionsDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("groupDefinitions")) Is Nothing) Then
                Me.Tables.Add(New groupDefinitionsDataTable(ds.Tables("groupDefinitions")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property groupDefinitions As groupDefinitionsDataTable
        Get
            Return Me.tablegroupDefinitions
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsGroupDefinitions = CType(MyBase.Clone,dsGroupDefinitions)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("groupDefinitions")) Is Nothing) Then
            Me.Tables.Add(New groupDefinitionsDataTable(ds.Tables("groupDefinitions")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablegroupDefinitions = CType(Me.Tables("groupDefinitions"),groupDefinitionsDataTable)
        If (Not (Me.tablegroupDefinitions) Is Nothing) Then
            Me.tablegroupDefinitions.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsGroupDefinitions"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/dsGroupDefinitions.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablegroupDefinitions = New groupDefinitionsDataTable
        Me.Tables.Add(Me.tablegroupDefinitions)
    End Sub
    
    Private Function ShouldSerializegroupDefinitions() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub groupDefinitionsRowChangeEventHandler(ByVal sender As Object, ByVal e As groupDefinitionsRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class groupDefinitionsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnobjectUID As DataColumn
        
        Private columnobjectType As DataColumn
        
        Private columndisplayName As DataColumn
        
        Private columnclauseLink As DataColumn
        
        Private columnenabledFlag As DataColumn
        
        Private columnmaxExcept As DataColumn
        
        Private columngroupType As DataColumn
        
        Private columndescription As DataColumn
        
        Private columnmailNickName As DataColumn
        
        Private columnpreserveMembers As DataColumn
        
        Friend Sub New()
            MyBase.New("groupDefinitions")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property objectUIDColumn As DataColumn
            Get
                Return Me.columnobjectUID
            End Get
        End Property
        
        Friend ReadOnly Property objectTypeColumn As DataColumn
            Get
                Return Me.columnobjectType
            End Get
        End Property
        
        Friend ReadOnly Property displayNameColumn As DataColumn
            Get
                Return Me.columndisplayName
            End Get
        End Property
        
        Friend ReadOnly Property clauseLinkColumn As DataColumn
            Get
                Return Me.columnclauseLink
            End Get
        End Property
        
        Friend ReadOnly Property enabledFlagColumn As DataColumn
            Get
                Return Me.columnenabledFlag
            End Get
        End Property
        
        Friend ReadOnly Property maxExceptColumn As DataColumn
            Get
                Return Me.columnmaxExcept
            End Get
        End Property
        
        Friend ReadOnly Property groupTypeColumn As DataColumn
            Get
                Return Me.columngroupType
            End Get
        End Property
        
        Friend ReadOnly Property descriptionColumn As DataColumn
            Get
                Return Me.columndescription
            End Get
        End Property
        
        Friend ReadOnly Property mailNickNameColumn As DataColumn
            Get
                Return Me.columnmailNickName
            End Get
        End Property
        
        Friend ReadOnly Property preserveMembersColumn As DataColumn
            Get
                Return Me.columnpreserveMembers
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As groupDefinitionsRow
            Get
                Return CType(Me.Rows(index),groupDefinitionsRow)
            End Get
        End Property
        
        Public Event groupDefinitionsRowChanged As groupDefinitionsRowChangeEventHandler
        
        Public Event groupDefinitionsRowChanging As groupDefinitionsRowChangeEventHandler
        
        Public Event groupDefinitionsRowDeleted As groupDefinitionsRowChangeEventHandler
        
        Public Event groupDefinitionsRowDeleting As groupDefinitionsRowChangeEventHandler
        
        Public Overloads Sub AddgroupDefinitionsRow(ByVal row As groupDefinitionsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddgroupDefinitionsRow(ByVal objectUID As String, ByVal objectType As String, ByVal displayName As String, ByVal clauseLink As String, ByVal enabledFlag As String, ByVal maxExcept As String, ByVal groupType As Integer, ByVal description As String, ByVal mailNickName As String, ByVal preserveMembers As Integer) As groupDefinitionsRow
            Dim rowgroupDefinitionsRow As groupDefinitionsRow = CType(Me.NewRow,groupDefinitionsRow)
            rowgroupDefinitionsRow.ItemArray = New Object() {objectUID, objectType, displayName, clauseLink, enabledFlag, maxExcept, groupType, description, mailNickName, preserveMembers}
            Me.Rows.Add(rowgroupDefinitionsRow)
            Return rowgroupDefinitionsRow
        End Function
        
        Public Function FindByobjectUID(ByVal objectUID As String) As groupDefinitionsRow
            Return CType(Me.Rows.Find(New Object() {objectUID}),groupDefinitionsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As groupDefinitionsDataTable = CType(MyBase.Clone,groupDefinitionsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New groupDefinitionsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnobjectUID = Me.Columns("objectUID")
            Me.columnobjectType = Me.Columns("objectType")
            Me.columndisplayName = Me.Columns("displayName")
            Me.columnclauseLink = Me.Columns("clauseLink")
            Me.columnenabledFlag = Me.Columns("enabledFlag")
            Me.columnmaxExcept = Me.Columns("maxExcept")
            Me.columngroupType = Me.Columns("groupType")
            Me.columndescription = Me.Columns("description")
            Me.columnmailNickName = Me.Columns("mailNickName")
            Me.columnpreserveMembers = Me.Columns("preserveMembers")
        End Sub
        
        Private Sub InitClass()
            Me.columnobjectUID = New DataColumn("objectUID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnobjectUID)
            Me.columnobjectType = New DataColumn("objectType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnobjectType)
            Me.columndisplayName = New DataColumn("displayName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndisplayName)
            Me.columnclauseLink = New DataColumn("clauseLink", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnclauseLink)
            Me.columnenabledFlag = New DataColumn("enabledFlag", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnenabledFlag)
            Me.columnmaxExcept = New DataColumn("maxExcept", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmaxExcept)
            Me.columngroupType = New DataColumn("groupType", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngroupType)
            Me.columndescription = New DataColumn("description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndescription)
            Me.columnmailNickName = New DataColumn("mailNickName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmailNickName)
            Me.columnpreserveMembers = New DataColumn("preserveMembers", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpreserveMembers)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnobjectUID}, true))
            Me.columnobjectUID.AllowDBNull = false
            Me.columnobjectUID.Unique = true
        End Sub
        
        Public Function NewgroupDefinitionsRow() As groupDefinitionsRow
            Return CType(Me.NewRow,groupDefinitionsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New groupDefinitionsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(groupDefinitionsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.groupDefinitionsRowChangedEvent) Is Nothing) Then
                RaiseEvent groupDefinitionsRowChanged(Me, New groupDefinitionsRowChangeEvent(CType(e.Row,groupDefinitionsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.groupDefinitionsRowChangingEvent) Is Nothing) Then
                RaiseEvent groupDefinitionsRowChanging(Me, New groupDefinitionsRowChangeEvent(CType(e.Row,groupDefinitionsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.groupDefinitionsRowDeletedEvent) Is Nothing) Then
                RaiseEvent groupDefinitionsRowDeleted(Me, New groupDefinitionsRowChangeEvent(CType(e.Row,groupDefinitionsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.groupDefinitionsRowDeletingEvent) Is Nothing) Then
                RaiseEvent groupDefinitionsRowDeleting(Me, New groupDefinitionsRowChangeEvent(CType(e.Row,groupDefinitionsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovegroupDefinitionsRow(ByVal row As groupDefinitionsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class groupDefinitionsRow
        Inherits DataRow
        
        Private tablegroupDefinitions As groupDefinitionsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablegroupDefinitions = CType(Me.Table,groupDefinitionsDataTable)
        End Sub
        
        Public Property objectUID As String
            Get
                Return CType(Me(Me.tablegroupDefinitions.objectUIDColumn),String)
            End Get
            Set
                Me(Me.tablegroupDefinitions.objectUIDColumn) = value
            End Set
        End Property
        
        Public Property objectType As String
            Get
                Try 
                    Return CType(Me(Me.tablegroupDefinitions.objectTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegroupDefinitions.objectTypeColumn) = value
            End Set
        End Property
        
        Public Property displayName As String
            Get
                Try 
                    Return CType(Me(Me.tablegroupDefinitions.displayNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegroupDefinitions.displayNameColumn) = value
            End Set
        End Property
        
        Public Property clauseLink As String
            Get
                Try 
                    Return CType(Me(Me.tablegroupDefinitions.clauseLinkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegroupDefinitions.clauseLinkColumn) = value
            End Set
        End Property
        
        Public Property enabledFlag As String
            Get
                Try 
                    Return CType(Me(Me.tablegroupDefinitions.enabledFlagColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegroupDefinitions.enabledFlagColumn) = value
            End Set
        End Property
        
        Public Property maxExcept As String
            Get
                Try 
                    Return CType(Me(Me.tablegroupDefinitions.maxExceptColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegroupDefinitions.maxExceptColumn) = value
            End Set
        End Property
        
        Public Property groupType As Integer
            Get
                Try 
                    Return CType(Me(Me.tablegroupDefinitions.groupTypeColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegroupDefinitions.groupTypeColumn) = value
            End Set
        End Property
        
        Public Property description As String
            Get
                Try 
                    Return CType(Me(Me.tablegroupDefinitions.descriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegroupDefinitions.descriptionColumn) = value
            End Set
        End Property
        
        Public Property mailNickName As String
            Get
                Try 
                    Return CType(Me(Me.tablegroupDefinitions.mailNickNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegroupDefinitions.mailNickNameColumn) = value
            End Set
        End Property
        
        Public Property preserveMembers As Integer
            Get
                Try 
                    Return CType(Me(Me.tablegroupDefinitions.preserveMembersColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegroupDefinitions.preserveMembersColumn) = value
            End Set
        End Property
        
        Public Function IsobjectTypeNull() As Boolean
            Return Me.IsNull(Me.tablegroupDefinitions.objectTypeColumn)
        End Function
        
        Public Sub SetobjectTypeNull()
            Me(Me.tablegroupDefinitions.objectTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdisplayNameNull() As Boolean
            Return Me.IsNull(Me.tablegroupDefinitions.displayNameColumn)
        End Function
        
        Public Sub SetdisplayNameNull()
            Me(Me.tablegroupDefinitions.displayNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsclauseLinkNull() As Boolean
            Return Me.IsNull(Me.tablegroupDefinitions.clauseLinkColumn)
        End Function
        
        Public Sub SetclauseLinkNull()
            Me(Me.tablegroupDefinitions.clauseLinkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsenabledFlagNull() As Boolean
            Return Me.IsNull(Me.tablegroupDefinitions.enabledFlagColumn)
        End Function
        
        Public Sub SetenabledFlagNull()
            Me(Me.tablegroupDefinitions.enabledFlagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmaxExceptNull() As Boolean
            Return Me.IsNull(Me.tablegroupDefinitions.maxExceptColumn)
        End Function
        
        Public Sub SetmaxExceptNull()
            Me(Me.tablegroupDefinitions.maxExceptColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsgroupTypeNull() As Boolean
            Return Me.IsNull(Me.tablegroupDefinitions.groupTypeColumn)
        End Function
        
        Public Sub SetgroupTypeNull()
            Me(Me.tablegroupDefinitions.groupTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdescriptionNull() As Boolean
            Return Me.IsNull(Me.tablegroupDefinitions.descriptionColumn)
        End Function
        
        Public Sub SetdescriptionNull()
            Me(Me.tablegroupDefinitions.descriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmailNickNameNull() As Boolean
            Return Me.IsNull(Me.tablegroupDefinitions.mailNickNameColumn)
        End Function
        
        Public Sub SetmailNickNameNull()
            Me(Me.tablegroupDefinitions.mailNickNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspreserveMembersNull() As Boolean
            Return Me.IsNull(Me.tablegroupDefinitions.preserveMembersColumn)
        End Function
        
        Public Sub SetpreserveMembersNull()
            Me(Me.tablegroupDefinitions.preserveMembersColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class groupDefinitionsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As groupDefinitionsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As groupDefinitionsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As groupDefinitionsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
