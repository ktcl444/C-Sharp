'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsAttributeGroupDefinitions
    Inherits DataSet
    
    Private tableattributeGroupDefinitions As attributeGroupDefinitionsDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("attributeGroupDefinitions")) Is Nothing) Then
                Me.Tables.Add(New attributeGroupDefinitionsDataTable(ds.Tables("attributeGroupDefinitions")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property attributeGroupDefinitions As attributeGroupDefinitionsDataTable
        Get
            Return Me.tableattributeGroupDefinitions
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsAttributeGroupDefinitions = CType(MyBase.Clone,dsAttributeGroupDefinitions)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("attributeGroupDefinitions")) Is Nothing) Then
            Me.Tables.Add(New attributeGroupDefinitionsDataTable(ds.Tables("attributeGroupDefinitions")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableattributeGroupDefinitions = CType(Me.Tables("attributeGroupDefinitions"),attributeGroupDefinitionsDataTable)
        If (Not (Me.tableattributeGroupDefinitions) Is Nothing) Then
            Me.tableattributeGroupDefinitions.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsAttributeGroupDefinitions"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/dsAttributeGroupDefinitions.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableattributeGroupDefinitions = New attributeGroupDefinitionsDataTable
        Me.Tables.Add(Me.tableattributeGroupDefinitions)
    End Sub
    
    Private Function ShouldSerializeattributeGroupDefinitions() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub attributeGroupDefinitionsRowChangeEventHandler(ByVal sender As Object, ByVal e As attributeGroupDefinitionsRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class attributeGroupDefinitionsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnobjectUID As DataColumn
        
        Private columnuniqueGroupID As DataColumn
        
        Private columndisplayName As DataColumn
        
        Private columnattributeGroupType As DataColumn
        
        Private columnattribute As DataColumn
        
        Private columnlinkAttribute As DataColumn
        
        Private columnlinkAttributeKey As DataColumn
        
        Private columngroupType As DataColumn
        
        Private columnmailEnabled As DataColumn
        
        Friend Sub New()
            MyBase.New("attributeGroupDefinitions")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property objectUIDColumn As DataColumn
            Get
                Return Me.columnobjectUID
            End Get
        End Property
        
        Friend ReadOnly Property uniqueGroupIDColumn As DataColumn
            Get
                Return Me.columnuniqueGroupID
            End Get
        End Property
        
        Friend ReadOnly Property displayNameColumn As DataColumn
            Get
                Return Me.columndisplayName
            End Get
        End Property
        
        Friend ReadOnly Property attributeGroupTypeColumn As DataColumn
            Get
                Return Me.columnattributeGroupType
            End Get
        End Property
        
        Friend ReadOnly Property attributeColumn As DataColumn
            Get
                Return Me.columnattribute
            End Get
        End Property
        
        Friend ReadOnly Property linkAttributeColumn As DataColumn
            Get
                Return Me.columnlinkAttribute
            End Get
        End Property
        
        Friend ReadOnly Property linkAttributeKeyColumn As DataColumn
            Get
                Return Me.columnlinkAttributeKey
            End Get
        End Property
        
        Friend ReadOnly Property groupTypeColumn As DataColumn
            Get
                Return Me.columngroupType
            End Get
        End Property
        
        Friend ReadOnly Property mailEnabledColumn As DataColumn
            Get
                Return Me.columnmailEnabled
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As attributeGroupDefinitionsRow
            Get
                Return CType(Me.Rows(index),attributeGroupDefinitionsRow)
            End Get
        End Property
        
        Public Event attributeGroupDefinitionsRowChanged As attributeGroupDefinitionsRowChangeEventHandler
        
        Public Event attributeGroupDefinitionsRowChanging As attributeGroupDefinitionsRowChangeEventHandler
        
        Public Event attributeGroupDefinitionsRowDeleted As attributeGroupDefinitionsRowChangeEventHandler
        
        Public Event attributeGroupDefinitionsRowDeleting As attributeGroupDefinitionsRowChangeEventHandler
        
        Public Overloads Sub AddattributeGroupDefinitionsRow(ByVal row As attributeGroupDefinitionsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddattributeGroupDefinitionsRow(ByVal objectUID As String, ByVal uniqueGroupID As String, ByVal displayName As String, ByVal attributeGroupType As String, ByVal attribute As String, ByVal linkAttribute As String, ByVal linkAttributeKey As String, ByVal groupType As Integer, ByVal mailEnabled As String) As attributeGroupDefinitionsRow
            Dim rowattributeGroupDefinitionsRow As attributeGroupDefinitionsRow = CType(Me.NewRow,attributeGroupDefinitionsRow)
            rowattributeGroupDefinitionsRow.ItemArray = New Object() {objectUID, uniqueGroupID, displayName, attributeGroupType, attribute, linkAttribute, linkAttributeKey, groupType, mailEnabled}
            Me.Rows.Add(rowattributeGroupDefinitionsRow)
            Return rowattributeGroupDefinitionsRow
        End Function
        
        Public Function FindByobjectUID(ByVal objectUID As String) As attributeGroupDefinitionsRow
            Return CType(Me.Rows.Find(New Object() {objectUID}),attributeGroupDefinitionsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As attributeGroupDefinitionsDataTable = CType(MyBase.Clone,attributeGroupDefinitionsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New attributeGroupDefinitionsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnobjectUID = Me.Columns("objectUID")
            Me.columnuniqueGroupID = Me.Columns("uniqueGroupID")
            Me.columndisplayName = Me.Columns("displayName")
            Me.columnattributeGroupType = Me.Columns("attributeGroupType")
            Me.columnattribute = Me.Columns("attribute")
            Me.columnlinkAttribute = Me.Columns("linkAttribute")
            Me.columnlinkAttributeKey = Me.Columns("linkAttributeKey")
            Me.columngroupType = Me.Columns("groupType")
            Me.columnmailEnabled = Me.Columns("mailEnabled")
        End Sub
        
        Private Sub InitClass()
            Me.columnobjectUID = New DataColumn("objectUID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnobjectUID)
            Me.columnuniqueGroupID = New DataColumn("uniqueGroupID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnuniqueGroupID)
            Me.columndisplayName = New DataColumn("displayName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndisplayName)
            Me.columnattributeGroupType = New DataColumn("attributeGroupType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnattributeGroupType)
            Me.columnattribute = New DataColumn("attribute", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnattribute)
            Me.columnlinkAttribute = New DataColumn("linkAttribute", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlinkAttribute)
            Me.columnlinkAttributeKey = New DataColumn("linkAttributeKey", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlinkAttributeKey)
            Me.columngroupType = New DataColumn("groupType", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngroupType)
            Me.columnmailEnabled = New DataColumn("mailEnabled", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmailEnabled)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnobjectUID}, true))
            Me.columnobjectUID.AllowDBNull = false
            Me.columnobjectUID.Unique = true
        End Sub
        
        Public Function NewattributeGroupDefinitionsRow() As attributeGroupDefinitionsRow
            Return CType(Me.NewRow,attributeGroupDefinitionsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New attributeGroupDefinitionsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(attributeGroupDefinitionsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.attributeGroupDefinitionsRowChangedEvent) Is Nothing) Then
                RaiseEvent attributeGroupDefinitionsRowChanged(Me, New attributeGroupDefinitionsRowChangeEvent(CType(e.Row,attributeGroupDefinitionsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.attributeGroupDefinitionsRowChangingEvent) Is Nothing) Then
                RaiseEvent attributeGroupDefinitionsRowChanging(Me, New attributeGroupDefinitionsRowChangeEvent(CType(e.Row,attributeGroupDefinitionsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.attributeGroupDefinitionsRowDeletedEvent) Is Nothing) Then
                RaiseEvent attributeGroupDefinitionsRowDeleted(Me, New attributeGroupDefinitionsRowChangeEvent(CType(e.Row,attributeGroupDefinitionsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.attributeGroupDefinitionsRowDeletingEvent) Is Nothing) Then
                RaiseEvent attributeGroupDefinitionsRowDeleting(Me, New attributeGroupDefinitionsRowChangeEvent(CType(e.Row,attributeGroupDefinitionsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveattributeGroupDefinitionsRow(ByVal row As attributeGroupDefinitionsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class attributeGroupDefinitionsRow
        Inherits DataRow
        
        Private tableattributeGroupDefinitions As attributeGroupDefinitionsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableattributeGroupDefinitions = CType(Me.Table,attributeGroupDefinitionsDataTable)
        End Sub
        
        Public Property objectUID As String
            Get
                Return CType(Me(Me.tableattributeGroupDefinitions.objectUIDColumn),String)
            End Get
            Set
                Me(Me.tableattributeGroupDefinitions.objectUIDColumn) = value
            End Set
        End Property
        
        Public Property uniqueGroupID As String
            Get
                Try 
                    Return CType(Me(Me.tableattributeGroupDefinitions.uniqueGroupIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableattributeGroupDefinitions.uniqueGroupIDColumn) = value
            End Set
        End Property
        
        Public Property displayName As String
            Get
                Try 
                    Return CType(Me(Me.tableattributeGroupDefinitions.displayNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableattributeGroupDefinitions.displayNameColumn) = value
            End Set
        End Property
        
        Public Property attributeGroupType As String
            Get
                Try 
                    Return CType(Me(Me.tableattributeGroupDefinitions.attributeGroupTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableattributeGroupDefinitions.attributeGroupTypeColumn) = value
            End Set
        End Property
        
        Public Property attribute As String
            Get
                Try 
                    Return CType(Me(Me.tableattributeGroupDefinitions.attributeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableattributeGroupDefinitions.attributeColumn) = value
            End Set
        End Property
        
        Public Property linkAttribute As String
            Get
                Try 
                    Return CType(Me(Me.tableattributeGroupDefinitions.linkAttributeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableattributeGroupDefinitions.linkAttributeColumn) = value
            End Set
        End Property
        
        Public Property linkAttributeKey As String
            Get
                Try 
                    Return CType(Me(Me.tableattributeGroupDefinitions.linkAttributeKeyColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableattributeGroupDefinitions.linkAttributeKeyColumn) = value
            End Set
        End Property
        
        Public Property groupType As Integer
            Get
                Try 
                    Return CType(Me(Me.tableattributeGroupDefinitions.groupTypeColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableattributeGroupDefinitions.groupTypeColumn) = value
            End Set
        End Property
        
        Public Property mailEnabled As String
            Get
                Try 
                    Return CType(Me(Me.tableattributeGroupDefinitions.mailEnabledColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableattributeGroupDefinitions.mailEnabledColumn) = value
            End Set
        End Property
        
        Public Function IsuniqueGroupIDNull() As Boolean
            Return Me.IsNull(Me.tableattributeGroupDefinitions.uniqueGroupIDColumn)
        End Function
        
        Public Sub SetuniqueGroupIDNull()
            Me(Me.tableattributeGroupDefinitions.uniqueGroupIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdisplayNameNull() As Boolean
            Return Me.IsNull(Me.tableattributeGroupDefinitions.displayNameColumn)
        End Function
        
        Public Sub SetdisplayNameNull()
            Me(Me.tableattributeGroupDefinitions.displayNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsattributeGroupTypeNull() As Boolean
            Return Me.IsNull(Me.tableattributeGroupDefinitions.attributeGroupTypeColumn)
        End Function
        
        Public Sub SetattributeGroupTypeNull()
            Me(Me.tableattributeGroupDefinitions.attributeGroupTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsattributeNull() As Boolean
            Return Me.IsNull(Me.tableattributeGroupDefinitions.attributeColumn)
        End Function
        
        Public Sub SetattributeNull()
            Me(Me.tableattributeGroupDefinitions.attributeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslinkAttributeNull() As Boolean
            Return Me.IsNull(Me.tableattributeGroupDefinitions.linkAttributeColumn)
        End Function
        
        Public Sub SetlinkAttributeNull()
            Me(Me.tableattributeGroupDefinitions.linkAttributeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslinkAttributeKeyNull() As Boolean
            Return Me.IsNull(Me.tableattributeGroupDefinitions.linkAttributeKeyColumn)
        End Function
        
        Public Sub SetlinkAttributeKeyNull()
            Me(Me.tableattributeGroupDefinitions.linkAttributeKeyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsgroupTypeNull() As Boolean
            Return Me.IsNull(Me.tableattributeGroupDefinitions.groupTypeColumn)
        End Function
        
        Public Sub SetgroupTypeNull()
            Me(Me.tableattributeGroupDefinitions.groupTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmailEnabledNull() As Boolean
            Return Me.IsNull(Me.tableattributeGroupDefinitions.mailEnabledColumn)
        End Function
        
        Public Sub SetmailEnabledNull()
            Me(Me.tableattributeGroupDefinitions.mailEnabledColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class attributeGroupDefinitionsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As attributeGroupDefinitionsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As attributeGroupDefinitionsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As attributeGroupDefinitionsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
